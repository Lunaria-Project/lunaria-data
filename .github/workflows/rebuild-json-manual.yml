name: Rebuild JSON (manual)

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "Why are you rebuilding?"
        required: false
        default: ""

permissions:
  contents: read

env:
  JSON_REPO: Lunaria-Project/lunaria-data-json   # 결과 저장 레포
  JSON_BRANCH: main                               # 타깃 브랜치
  JSON_SUBDIR: data                               # 타깃 레포 내 하위 폴더

jobs:
  rebuild:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ✅ 항상 전체 스캔으로 변환 대상 지정
      - name: Force full scan
        run: |
          set -euxo pipefail
          git ls-files > changed.txt
          echo "GIT_DIFF_FILES<<EOF" >> $GITHUB_ENV
          cat changed.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "[debug] planned files:"
          head -n 50 changed.txt || true

      - name: Run converter (full rebuild)
        env:
          GIT_DIFF_FILES: ${{ env.GIT_DIFF_FILES }}
        run: |
          set -euxo pipefail
          python scripts/convert_xlsx_to_json.py
          echo "[debug] json directory tree:"
          ls -R json || true

      # ---- 타깃 레포 준비 (수동 git) ----
      - name: Prepare JSON target repo
        env:
          GH_TOKEN: ${{ secrets.JSON_REPO_TOKEN }}
        run: |
          set -euxo pipefail
          rm -rf json-repo
          mkdir -p json-repo
          cd json-repo
          git init
          git config user.name "json-export-bot"
          git config user.email "json-export-bot@users.noreply.github.com"
          git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/${{ env.JSON_REPO }}.git"
          if git ls-remote --exit-code --heads origin ${{ env.JSON_BRANCH }}; then
            git fetch origin ${{ env.JSON_BRANCH }} --depth=1
            git checkout -B ${{ env.JSON_BRANCH }} FETCH_HEAD
          else
            git checkout --orphan ${{ env.JSON_BRANCH }}
            echo "{}" > .init.json
            git add .init.json
            git commit -m "chore: initialize branch"
            git push -u origin ${{ env.JSON_BRANCH }}
          fi

      # ✅ 폴더별 동기화: 각 루트(엑셀 파일명) 안에서만 --delete
      - name: Sync data folders (per-root, with delete)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "json-repo/${{ env.JSON_SUBDIR }}"
          shopt -s nullglob
          for d in json/*/ ; do
            base="$(basename "$d")"
            mkdir -p "json-repo/${{ env.JSON_SUBDIR }}/${base}"
            rsync -a --delete "$d" "json-repo/${{ env.JSON_SUBDIR }}/${base}/"
          done
          # 루트 직하 JSON이 있으면 복사(거의 없지만 대비)
          for f in json/*.json ; do
            rsync -a "$f" "json-repo/${{ env.JSON_SUBDIR }}/"
          done

          echo "[debug] synced files:"
          find "json-repo/${{ env.JSON_SUBDIR }}" -type f -name "*.json" | sort | sed 's/^/  /'

      - name: Commit & push
        working-directory: json-repo
        env:
          GH_TOKEN: ${{ secrets.JSON_REPO_TOKEN }}
        run: |
          set -euxo pipefail
          git status
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            REASON="${{ github.event.inputs.reason }}"
            # 커밋 메시지: [실행자] : manual rebuild (optional reason)
            if [ -n "$REASON" ]; then
              MSG="[${{ github.actor }}] : manual rebuild - $REASON"
            else
              MSG="[${{ github.actor }}] : manual rebuild"
            fi
            git commit -m "$MSG"
            git push origin HEAD:${{ env.JSON_BRANCH }}
          else
            echo "No changes to push."
          fi
