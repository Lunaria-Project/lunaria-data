name: XLSX to JSON (export to external repo)

on:
  push:
    paths:
      - "**/*.xlsx"
      - "**/*.xlsm"
      - "**/*.xls"
      - "**/*.csv"
      - "scripts/convert_xlsx_to_json.py"
      - "requirements.txt"
  pull_request:
    paths:
      - "**/*.xlsx"
      - "**/*.xlsm"
      - "**/*.xls"
      - "**/*.csv"
      - "scripts/convert_xlsx_to_json.py"
      - "requirements.txt"

permissions:
  contents: read

env:
  JSON_REPO: Lunaria-Project/lunaria-data-json
  JSON_BRANCH: main
  JSON_SUBDIR: data
  META_DIR: _meta
  ID_MAP_BASENAME: id_map.json

jobs:
  export:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Collect changed files (robust)
        run: |
          set -euxo pipefail
          : > changed.txt

          if [ "${{ github.event_name }}" = "push" ]; then
            echo "[push] collect changed files"
            PARENT="$(git rev-parse '${{ github.sha }}^' 2>/dev/null || true)"
            if [ -n "$PARENT" ]; then
              git diff --name-only "$PARENT" '${{ github.sha }}' > changed.txt || true
            fi
            if [ ! -s changed.txt ]; then
              echo "[fallback] no parent or diff failed -> list all tracked files"
              git ls-files > changed.txt
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "[pr] collect changed files vs base"
            git fetch origin '${{ github.base_ref }}' --depth=0
            git diff --name-only "origin/${{ github.base_ref }}...HEAD" > changed.txt || true
            if [ ! -s changed.txt ]; then
              echo "[fallback] diff failed -> list all tracked files"
              git ls-files > changed.txt
            fi
          else
            echo "[other] list all tracked files"
            git ls-files > changed.txt
          fi

          echo "GIT_DIFF_FILES<<EOF" >> $GITHUB_ENV
          cat changed.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "Changed files:"; cat changed.txt

          if ! grep -E '\.(xlsx|xlsm|xls|csv)$' changed.txt >/dev/null 2>&1; then
            echo "[info] no data file changed -> force full scan"
            git ls-files > changed.txt
            echo "GIT_DIFF_FILES<<EOF" >> $GITHUB_ENV
            cat changed.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Prefetch id_map.json from JSON repo (if exists)
        if: ${{ github.event_name == 'push' }}
        env:
          GH_TOKEN: ${{ secrets.JSON_REPO_TOKEN }}
        run: |
          set -euxo pipefail
          rm -rf prefetch
          mkdir -p prefetch
          cd prefetch
          git init
          git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/${{ env.JSON_REPO }}.git"
          if git ls-remote --exit-code --heads origin ${{ env.JSON_BRANCH }}; then
            git fetch origin ${{ env.JSON_BRANCH }} --depth=1
            git checkout -B ${{ env.JSON_BRANCH }} FETCH_HEAD
            if [ -f "${{ env.JSON_SUBDIR }}/${{ env.META_DIR }}/${{ env.ID_MAP_BASENAME }}" ]; then
              cp "${{ env.JSON_SUBDIR }}/${{ env.META_DIR }}/${{ env.ID_MAP_BASENAME }}" ../id_map.json
              echo "[prefetch] brought id_map.json → $(realpath ../id_map.json)"
            else
              echo "[prefetch] no existing id_map.json in JSON repo"
            fi
          else
            echo "[prefetch] JSON branch not found; skipping"
          fi
          cd ..

      - name: Run converter
        env:
          GIT_DIFF_FILES: ${{ env.GIT_DIFF_FILES }}
          ID_START: "1000000"
        run: |
          set -euxo pipefail
          python scripts/convert_xlsx_to_json.py
          echo "[debug] json directory:"; ls -R json || true
          echo "[debug] id_map.json presence:"; [ -f id_map.json ] && ls -l id_map.json || echo "id_map.json NOT FOUND"

      - name: Upload artifact (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: json-output
          path: |
            json
            id_map.json

      - name: Prepare JSON target repo
        if: ${{ github.event_name == 'push' }}
        env:
          GH_TOKEN: ${{ secrets.JSON_REPO_TOKEN }}
        run: |
          set -euxo pipefail
          rm -rf json-repo
          mkdir -p json-repo
          cd json-repo
          git init
          git config user.name "json-export-bot"
          git config user.email "json-export-bot@users.noreply.github.com"
          git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/${{ env.JSON_REPO }}.git"
          if git ls-remote --exit-code --heads origin ${{ env.JSON_BRANCH }}; then
            git fetch origin ${{ env.JSON_BRANCH }} --depth=1
            git checkout -B ${{ env.JSON_BRANCH }} FETCH_HEAD
          else
            git checkout --orphan ${{ env.JSON_BRANCH }}
            echo "{}" > .init.json
            git add .init.json
            git commit -m "chore: initialize branch"
            git push -u origin ${{ env.JSON_BRANCH }}
          fi
          cd ..

      - name: Copy, commit & push JSON to target repo
        if: ${{ github.event_name == 'push' }}
        working-directory: json-repo
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.JSON_REPO_TOKEN }}
        run: |
          set -euxo pipefail
          git config --global --add safe.directory "$PWD"

          mkdir -p "$JSON_SUBDIR"
          shopt -s nullglob
          for d in ../json/*/ ; do
            base="$(basename "$d")"
            mkdir -p "$JSON_SUBDIR/$base"
            rsync -a --delete "$d" "$JSON_SUBDIR/$base/"
          done
          for f in ../json/*.json ; do
            rsync -a "$f" "$JSON_SUBDIR/"
          done

          # id_map.json 스냅샷 반영
          if [ -f ../id_map.json ]; then
            mkdir -p "$JSON_SUBDIR/$META_DIR"
            cp ../id_map.json "$JSON_SUBDIR/$META_DIR/$ID_MAP_BASENAME"
            echo "[copy] wrote $JSON_SUBDIR/$META_DIR/$ID_MAP_BASENAME"
          else
            echo "[copy] id_map.json missing in workspace; nothing to copy"
          fi

          echo "[debug] files to commit (top 50):"
          git status --porcelain | head -n 50

          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            AUTHOR="${{ github.event.head_commit.author.name }}"
            MSG="$(printf "%s" "${{ github.event.head_commit.message }}" | head -n 1 | tr -d '\r')"
            git commit -m "[${AUTHOR}] : ${MSG}"
            git push origin HEAD:${{ env.JSON_BRANCH }}
          else
            echo "No changes to push."
          fi
